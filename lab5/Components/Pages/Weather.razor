@page "/weather"
@attribute [StreamRendering]
@rendermode InteractiveServer
<PageTitle>Weather</PageTitle>

<h1>Weather</h1>

<p>This component demonstrates showing data.</p>

@if (forecasts == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <input class="form-control" @oninput="@Input" />
    <table class="table">
        <thead>
            <tr>
                <th>Date</th>
                <th>Temp. (C)</th>
                <th>Temp. (F)</th>
                <th>Summary</th>
            </tr>
        </thead>
        <tbody>
            @foreach (var forecast in forecasts)
            {
                <tr>
                    <td>@forecast.Date.ToShortDateString()</td>
                    <td>@forecast.TemperatureC</td>
                    <td>@forecast.TemperatureF</td>
                    <td>@forecast.Summary</td>
                    
                </tr>
                
            }
        </tbody>

    </table>
    <p>Number of warm days: @forecasts.Sum(f => f.WarmDays)</p>
    <button class=" btn btn-primary " @onclick="filtrtemperatury"> Click me</button>
    <button class=" btn btn-primary " @onclick="restore">Restore</button>
    

}

@code {
    private WeatherForecast[]? forecasts;
    private WeatherForecast[]? rest;


    protected override async Task OnInitializedAsync()
    {
        // Simulate asynchronous loading to demonstrate streaming rendering
        await Task.Delay(500);

        var startDate = DateOnly.FromDateTime(DateTime.Now);
        var summaries = new[] { "Freezing", "Bracing", "Chilly", "Cool", "Mild", "Warm", "Balmy", "Hot", "Sweltering", "Scorching" };
        forecasts = Enumerable.Range(1, 10).Select(index => new WeatherForecast
        {
            Date = startDate.AddDays(index),
            TemperatureC = Random.Shared.Next(-20, 55),
            Summary = summaries[Random.Shared.Next(summaries.Length)]


        }).ToArray();
        var list = forecasts.ToList();
        rest = list.ToArray();


        foreach(var forecast in forecasts)
        {
            if(forecast.TemperatureC > 15)
            {
                forecast.WarmDays++;
            }

        }


    }
   

    public async Task filtrtemperatury()
    {
        await Task.Delay(500);
        forecasts = forecasts.Where(f => f.TemperatureC > 15).ToArray();
    }


    public async Task restore()
    {
        await Task.Delay(500);
        forecasts = rest;
    }

    public async Task Input(ChangeEventArgs arg)
    {
        
        forecasts = rest;
        forecasts = forecasts.Where(f => f.Summary.Contains(arg.Value.ToString())).ToArray();
    }

    private class WeatherForecast
    {

        public DateOnly Date { get; set; }
        public int TemperatureC { get; set; }
        public string? Summary { get; set; }
        private int warmDays;
        public int TemperatureF => 32 + (int)(TemperatureC / 0.5556);
        
        public int WarmDays
        {
            get { return warmDays; }
            set { warmDays = value; }
        } 

    }
}
